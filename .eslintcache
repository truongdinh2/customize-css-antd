[{"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\App.tsx":"1","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\form.tsx":"2","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\test.tsx":"3","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\tableData\\table.jsx":"4","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\index.tsx":"5","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\reportWebVitals.ts":"6","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\tableData\\pageTable.jsx":"7","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\tableData\\ToolTable.tsx":"8","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\reducer\\dataSide.jsx":"9","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\constants\\index.js":"10","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\reducer\\myReducer.js":"11","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\action\\index.js":"12","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\api\\getApi.js":"13","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\example.jsx":"14","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\muiDataTable\\MuiDataTable.jsx":"15","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\muiDataTable\\search.jsx":"16","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\brack.jsx":"17","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\A.js":"18"},{"size":569,"mtime":1611565830591,"results":"19","hashOfConfig":"20"},{"size":4657,"mtime":1611113405183,"results":"21","hashOfConfig":"20"},{"size":1748,"mtime":1611560068991,"results":"22","hashOfConfig":"20"},{"size":2458,"mtime":1611567647491,"results":"23","hashOfConfig":"20"},{"size":447,"mtime":1611117971522,"results":"24","hashOfConfig":"20"},{"size":425,"mtime":1610504214212,"results":"25","hashOfConfig":"20"},{"size":5564,"mtime":1611031492512,"results":"26","hashOfConfig":"20"},{"size":6321,"mtime":1611196316427,"results":"27","hashOfConfig":"20"},{"size":550,"mtime":1611133703010,"results":"28","hashOfConfig":"20"},{"size":155,"mtime":1611133491236,"results":"29","hashOfConfig":"20"},{"size":159,"mtime":1611117933151,"results":"30","hashOfConfig":"20"},{"size":367,"mtime":1611133559786,"results":"31","hashOfConfig":"20"},{"size":244,"mtime":1611126493842,"results":"32","hashOfConfig":"20"},{"size":9993,"mtime":1611200146299,"results":"33","hashOfConfig":"20"},{"size":10235,"mtime":1611574166293,"results":"34","hashOfConfig":"20"},{"size":1882,"mtime":1611216130526,"results":"35","hashOfConfig":"20"},{"size":127,"mtime":1611559325250,"results":"36","hashOfConfig":"20"},{"size":65,"mtime":1611560059190,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1uoxs7t",{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\App.tsx",["83","84","85","86","87"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\form.tsx",["88","89","90","91","92"],"import { Form, Input, Button, Space, Row, Col, Divider, Typography, DatePicker } from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\n// import { FormValues } from './typesc/form';\r\nimport { useEffect, useState } from 'react';\r\n// import Moment from 'react-moment';\r\nimport moment from 'moment';\r\ninterface FormValues {\r\n    task1: {\r\n        date?: Date | string,\r\n        date1: string | Date\r\n    } | any\r\n    // task1: any\r\n}\r\nconst FormFile = () => {\r\n    const [dataForm, setDataForm] = useState<FormValues>({ task1: {} });\r\n    const [form] = Form.useForm()\r\n    // const obj = {t:3,r:33,w:1}\r\n    // console.log(obj['t'])\r\n    // for( x in obj){\r\n    //     console.log(x,obj['t'],obj[x])\r\n    // }\r\n    // useEffect(() => {\r\n    //     form.setFieldsValue({task1:dataForm});\r\n\r\n    //     console.log(dataForm)\r\n    //   });\r\n    // useEffect(() => {\r\n    //     form.setFieldsValue('');\r\n    // });\r\n    const onFinish = (values: FormValues) => {\r\n        const dateFormat = moment(values.task1.date).format(\"MM/DD/YYYY\");\r\n        setDataForm({ task1: { ...values.task1, date1: dateFormat } });\r\n\r\n        console.log('Received values of form:', values);\r\n    };\r\n    console.log(dataForm)\r\n    const click = () => {\r\n        form.setFieldsValue({ task1: dataForm.task1 });\r\n        console.log('hi')\r\n        console.log(dataForm.task1)\r\n        console.log(dataForm)\r\n    }\r\n    return (\r\n        <div style={{ width: '90%', margin: '10px auto' }}>\r\n            <Form\r\n                name=\"dynamic_form_nest_item\" onFinish={onFinish}\r\n                form={form}\r\n                autoComplete=\"off\"\r\n                >\r\n                <Form.Item name={['task1', 'date']}>\r\n                    <DatePicker placeholder=\"date\" />\r\n                </Form.Item>\r\n                <Space\r\n                    direction=\"horizontal\"\r\n                    style={{ display: 'flex', justifyContent: \"space-between\", }}\r\n                    align=\"center\"\r\n                    split={\r\n                        <MinusCircleOutlined style={{ opacity: 0 }} />\r\n                    }\r\n                >\r\n                    <Form.Item\r\n                        name={['task1', 'nameTask']}\r\n                        rules={[{ required: true, message: 'Missing this name' }]}\r\n                    >\r\n                        <Input placeholder=\"Named task\" />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n\r\n                        name={['task1', 'contentTask']}\r\n                        rules={[{ required: true, message: 'Missing this name' }]}\r\n                    >\r\n                        <Input placeholder=\"Content task\" />\r\n                    </Form.Item>\r\n                </Space>\r\n                <Form.List name={['task1', 'users']}>\r\n                    {(fields, { add, remove }) => (\r\n                        <>\r\n                            {fields.map(field => (\r\n\r\n                                <Space key={field.key}\r\n                                    style={{ display: 'flex', flexDirection: 'row-reverse' }}\r\n                                    align=\"baseline\"\r\n                                >\r\n                                    <Form.Item\r\n                                        {...field}\r\n                                        name={[field.name, 'contentTask']}\r\n                                        fieldKey={[field.fieldKey, 'first']}\r\n                                        rules={[{ required: true, message: 'Missing this field' }]}\r\n                                    >\r\n                                        {console.log(field)}\r\n                                        <Input placeholder=\"Content task\" />\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                                </Space>\r\n                            ))}\r\n                            <Form.Item>\r\n                                <Button type=\"dashed\" onClick={() => { add() }} block icon={<PlusOutlined />}>\r\n                                    Add field\r\n                        </Button>\r\n                            </Form.Item>\r\n                        </>\r\n                    )}\r\n                </Form.List>\r\n\r\n\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        Submit\r\n                        </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n            <button onClick={click}>hi</button>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default FormFile",["93","94"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\test.tsx",[],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\tableData\\table.jsx",[],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\index.tsx",[],["95","96"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\tableData\\pageTable.jsx",["97","98","99"],"import React, { useEffect, useState } from 'react';\r\nimport './pageTable.css';\r\nimport { RightOutlined, LeftOutlined, DoubleRightOutlined, DoubleLeftOutlined } from '@ant-design/icons';\r\nimport { FormControl, FormHelperText, InputLabel, makeStyles, MenuItem, NativeSelect, Select } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\nconst PageTable = (props) => {\r\n    const [pagePerNum, setPagePerNum] = useState(5);\r\n    const [dataNum, setDataNum] = useState([]);\r\n    const dataNum1 = props.dataNum;\r\n    const dataNumLen = dataNum.length;\r\n    const pageNumAll = Math.ceil(dataNumLen / pagePerNum);\r\n    const [pageCurr, setPageCurr] = useState('1');\r\n    const lastIndexPerP = pageCurr * pagePerNum;\r\n    const firstIndexPerp = lastIndexPerP - pagePerNum;\r\n    const dataDisplay = dataNum.slice(firstIndexPerp, lastIndexPerP);\r\n    const pageCrrUp = pageCurr - -1;\r\n    const PageCrrDown = pageCurr - 1;\r\n    const classes = useStyles();\r\n    useEffect(() => {\r\n        if (dataNum1 !== undefined) {\r\n            setDataNum(dataNum1)\r\n        }\r\n    }, [dataNum1])\r\n    useEffect(() => {\r\n        const sendData = () => {\r\n            props.dataRender(dataDisplay)\r\n        }\r\n        sendData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [pageCurr, pagePerNum, dataNum])\r\n    return (\r\n        <>\r\n            <div className=\"divPageNum\">\r\n                <div className=\"divPageNum1\">\r\n                    <span\r\n                        className='allPage '\r\n                    >\r\n                        All pages: {dataNumLen}\r\n                    </span>\r\n                    <span\r\n                        className='allPage '\r\n                    >\r\n                        <div>Num</div>\r\n                        <FormControl className={classes.formControl}>\r\n                            {/* <InputLabel id=\"demo-simple-select-label\">Num </InputLabel> */}\r\n                            <Select\r\n                                onChange={(e) => { setPagePerNum(e.target.value); setPageCurr('1') }}\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                            >\r\n                                <MenuItem value={5} >5</MenuItem>\r\n                                <MenuItem value={10} >10</MenuItem>\r\n                                <MenuItem value={25} >25</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    \r\n                    </span>\r\n                </div>\r\n                <div className=\"divPageNum2\">\r\n                    <span\r\n                    >\r\n                        <button\r\n                            onClick={() => { setPageCurr(1) }}\r\n                            disabled={pageCurr <= 1}\r\n                        >\r\n                            <DoubleLeftOutlined style={{ color: 'red' }} />\r\n                        </button>\r\n                    </span>\r\n                    <span\r\n                    >\r\n                        <button\r\n                            onClick={() => { setPageCurr(pageCurr - 1) }}\r\n                            disabled={pageCurr <= 1}\r\n                        >\r\n                            <LeftOutlined style={{ color: 'red' }} />\r\n                        </button>\r\n                    </span>\r\n                    {PageCrrDown === 0 ? '' : <span\r\n                        className={'pageNum'}\r\n                        style={{ cursor: 'pointer' }}\r\n                        onClick={() => setPageCurr(pageCurr - 1)}\r\n                        id={PageCrrDown}\r\n                    >\r\n                        {PageCrrDown}\r\n                    </span>}\r\n                    <span\r\n                        className='pageNum pageCrr'\r\n                        style={{ cursor: 'pointer ' }}\r\n                        // onClick={handlePageChange}\r\n                        id={pageCurr}\r\n                    >\r\n                        {pageCurr}\r\n                    </span>\r\n                    {\r\n                        (pageNumAll < pageCrrUp) ? '' :\r\n                            <span\r\n                                className='pageNum'\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => { setPageCurr(pageCurr - -1) }}\r\n                                id={pageCrrUp}\r\n                            >\r\n                                {pageCrrUp}\r\n                            </span>\r\n                    }\r\n                    <span\r\n                    >\r\n                        <button\r\n                            disabled={pageNumAll <= pageCurr}\r\n                            onClick={() => { setPageCurr(pageCurr - -1) }}\r\n                        >\r\n                            <RightOutlined style={{ color: 'red' }} />\r\n                        </button>\r\n                    </span>\r\n                    <span\r\n                    >\r\n                        <button\r\n                            onClick={() => { setPageCurr(pageNumAll) }}\r\n                            disabled={pageNumAll <= pageCurr}\r\n                        >\r\n                            <DoubleRightOutlined style={{ color: 'red' }} />\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default PageTable;",["100","101"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\tableData\\ToolTable.tsx",["102","103","104","105"],"import { Button as ButtonMater } from '@material-ui/core';\r\nimport FilterListRoundedIcon from '@material-ui/icons/FilterListRounded';\r\nimport { Button, Form, Select } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FilterTable, GetApi } from '../../action';\r\nimport './toolTable.css';\r\nconst { Option }: any = Select;\r\n\r\nconst children: any = [];\r\n// for (let i = 10; i < 36; i++) {\r\n//     children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\r\n// }\r\nexport default function ToolTable() {\r\n    const [valueSearch, setValueSearch] = useState<string>('');\r\n    const [isFilterBox, setIsFilterBox] = useState(false);\r\n    const [locationFilter, setLocationFilter] = useState<any>({data:[]});\r\n    const dispatch = useDispatch();\r\n    const [dataApi, setDataApi] = useState([]);\r\n    const [form] = Form.useForm();\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        getDataApi();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    useEffect(() => {\r\n        dispatch(GetApi(dataApi))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [loading])\r\n\r\n    const getDataApi = () => {\r\n        const api = \"https://5fbb616ec09c200016d4067a.mockapi.io/kito\";\r\n        const results = fetch(api)\r\n            .then(res => res.json())\r\n            .then(data => { setDataApi(data); setLoading(true) })\r\n            .catch(err => console.log(`Warning!!! Error fetching data!!! \r\n          Error ${err}`));\r\n        return results;\r\n    }\r\n\r\n    const dataRedux: any = useSelector((state: any) => state.dataSide)\r\n    function handleChange(value: any) {\r\n        console.log(`selected ${value}`);\r\n    }\r\n    const onFinish = (values: any) => {\r\n        setLocationFilter(values);\r\n        setLoading(!loading);\r\n        setIsFilterBox(!isFilterBox)\r\n    }\r\n    // const OptionSelect = () => (\r\n    //     dataRedux.data.map((data: any,index:number)=>(\r\n    //         <Option value={data} key={index}>\r\n    //             {console.log(data)}\r\n    //             {data.location}\r\n    //         </Option>\r\n    //     ))\r\n    // )\r\n    const FilterBox = () => (\r\n        <div className=\"model_filter\" >\r\n            {/* {loading && */}\r\n                <Form\r\n                    name=\"dynamic_form_nest_item\"\r\n                    onFinish={onFinish}\r\n                    form={form}\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        justifyContent: \"space-between\",\r\n                        padding: ' 10px 0'\r\n                    }}>\r\n                        <ButtonMater variant=\"contained\" color=\"secondary\">reset</ButtonMater >\r\n                        <ButtonMater variant=\"contained\" color=\"primary\"\r\n                            onClick={() => setIsFilterBox(!isFilterBox)}\r\n                        >x</ButtonMater >\r\n                    </div>\r\n                    <div>\r\n                        <Form.Item\r\n                            name=\"location\"\r\n                        >\r\n                            <Select\r\n                                mode=\"tags\"\r\n                                style={{ width: '100%' }}\r\n                                placeholder=\"location\"\r\n                                onChange={handleChange}\r\n                                maxLength={2}\r\n                            >\r\n                                { loading &&\r\n                                dataRedux.data.map((data: any, index: number) => (\r\n                                    <Option value={data.location} key={index}>\r\n                                        {data.location}\r\n                                    </Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </div>\r\n                    <div>\r\n                        <Form.Item\r\n                            name=\"subject\"\r\n                        >\r\n                            <Select mode=\"tags\" style={{ width: '100%' }}\r\n                                placeholder=\"subject\"\r\n                            // value=\"all\"\r\n                            // onChange={handleChange}\r\n                            >\r\n                                <Option value=\"all\" selec>All</Option>\r\n                                {children}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </div>\r\n                    <div>\r\n                        <Form.Item\r\n                            name=\"cost\"\r\n                        >\r\n                            <Select mode=\"tags\" style={{ width: '100%' }}\r\n                                placeholder=\"cost\"\r\n                            // onChange={handleChange}\r\n                            >\r\n                                {children}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </div>\r\n                    <div>\r\n                        <Button htmlType=\"submit\"  >sub</Button>\r\n                    </div>\r\n                </Form>\r\n\r\n        </div>\r\n    )\r\n    console.log(locationFilter)\r\n    const FilterData = () => {\r\n        // console.log(locationFilter.location);\r\n        let loca:string[] = locationFilter.location;\r\n        // loca.map(());\r\n        // dataApi.data\r\n        setLocationFilter('')\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"body\">\r\n                <div className=\"form__group field\">\r\n                    <input type=\"input\" className=\"form__field\"\r\n                        onChange={(e: any) => setValueSearch(e.target.value)}\r\n                        placeholder=\"Name\" name=\"name\" id='name' />\r\n                    <label htmlFor=\"name\" className=\"form__label\">Name</label>\r\n                </div>\r\n                <div className=\"filter\" >\r\n                    <button\r\n                        className=\"btn_icon\"\r\n                        onClick={() => setIsFilterBox(!isFilterBox)}\r\n                    ><FilterListRoundedIcon color=\"secondary\" /></button>\r\n                    {isFilterBox && <FilterBox/>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\reducer\\dataSide.jsx",["106"],"import { useState } from 'react';\r\nimport dataApi from '../api/getApi';\r\nimport * as type from './../constants';\r\n\r\nconst initialState = {};\r\nconst dataSide = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case type.FILTER:\r\n            console.log(dataApi)\r\n            return {\r\n                data: dataApi\r\n            };\r\n            case type.GET_DATA_FROM_API:\r\n                return{\r\n                    data: action.payload\r\n                }\r\n        default: return state;\r\n    }\r\n}\r\nexport default dataSide;\r\n",["107","108"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\constants\\index.js",[],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\reducer\\myReducer.js",[],["109","110"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\action\\index.js",[],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\api\\getApi.js",[],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\example.jsx",["111"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\muiDataTable\\MuiDataTable.jsx",["112"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\muiDataTable\\search.jsx",[],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\brack.jsx",["113"],"C:\\Users\\Admin\\Desktop\\tclearning\\tclearning\\src\\components\\A.js",[],{"ruleId":"114","severity":1,"message":"115","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":20},{"ruleId":"114","severity":1,"message":"118","line":6,"column":8,"nodeType":"116","messageId":"117","endLine":6,"endColumn":17},{"ruleId":"114","severity":1,"message":"119","line":7,"column":8,"nodeType":"116","messageId":"117","endLine":7,"endColumn":15},{"ruleId":"114","severity":1,"message":"120","line":8,"column":8,"nodeType":"116","messageId":"117","endLine":8,"endColumn":16},{"ruleId":"114","severity":1,"message":"121","line":10,"column":8,"nodeType":"116","messageId":"117","endLine":10,"endColumn":12},{"ruleId":"114","severity":1,"message":"122","line":1,"column":38,"nodeType":"116","messageId":"117","endLine":1,"endColumn":41},{"ruleId":"114","severity":1,"message":"123","line":1,"column":43,"nodeType":"116","messageId":"117","endLine":1,"endColumn":46},{"ruleId":"114","severity":1,"message":"124","line":1,"column":48,"nodeType":"116","messageId":"117","endLine":1,"endColumn":55},{"ruleId":"114","severity":1,"message":"125","line":1,"column":57,"nodeType":"116","messageId":"117","endLine":1,"endColumn":67},{"ruleId":"114","severity":1,"message":"126","line":4,"column":10,"nodeType":"116","messageId":"117","endLine":4,"endColumn":19},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":4,"column":23,"nodeType":"116","messageId":"117","endLine":4,"endColumn":37},{"ruleId":"133","severity":1,"message":"135","line":4,"column":39,"nodeType":"116","messageId":"117","endLine":4,"endColumn":49},{"ruleId":"133","severity":1,"message":"136","line":4,"column":73,"nodeType":"116","messageId":"117","endLine":4,"endColumn":85},{"ruleId":"127","replacedBy":"137"},{"ruleId":"129","replacedBy":"138"},{"ruleId":"114","severity":1,"message":"139","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":21},{"ruleId":"114","severity":1,"message":"140","line":15,"column":12,"nodeType":"116","messageId":"117","endLine":15,"endColumn":23},{"ruleId":"114","severity":1,"message":"141","line":131,"column":11,"nodeType":"116","messageId":"117","endLine":131,"endColumn":21},{"ruleId":"114","severity":1,"message":"142","line":133,"column":13,"nodeType":"116","messageId":"117","endLine":133,"endColumn":26},{"ruleId":"133","severity":1,"message":"143","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":18},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"127","replacedBy":"144"},{"ruleId":"129","replacedBy":"145"},{"ruleId":"133","severity":1,"message":"146","line":134,"column":15,"nodeType":"116","messageId":"117","endLine":134,"endColumn":20},{"ruleId":"133","severity":1,"message":"147","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":14},{"ruleId":"133","severity":1,"message":"124","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":17},"@typescript-eslint/no-unused-vars","'MUIDataTable' is defined but never used.","Identifier","unusedVar","'TableData' is defined but never used.","'Example' is defined but never used.","'FormFile' is defined but never used.","'Test' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Divider' is defined but never used.","'Typography' is defined but never used.","'useEffect' is defined but never used.","no-native-reassign",["148"],"no-negated-in-lhs",["149"],["148"],["149"],"no-unused-vars","'FormHelperText' is defined but never used.","'InputLabel' is defined but never used.","'NativeSelect' is defined but never used.",["148"],["149"],"'FilterTable' is defined but never used.","'valueSearch' is assigned a value but never used.","'FilterData' is assigned a value but never used.","'loca' is assigned a value but never used.","'useState' is defined but never used.",["148"],["149"],"'data1' is assigned a value but never used.","'Chip' is defined but never used.","no-global-assign","no-unsafe-negation"]